import { z } from "zod";
import { Request, Response } from "express";
import { Link, Tag } from "../model/link-tag.model";
import Content from "../model/content.model";
import User from "../model/user.model";
import {
  handleZodError,
  handleServerError,
  handleAuthError,
} from "../utils/errorHandler";
import mongoose from "mongoose";


// Zod schema for the share endpoint's body
const shareBrainSchema = z.object({
  share: z.boolean(), // Expects a boolean: true to create/get link, false to delete
});

// Zod schema for the share link parameter
const getSharedBrainSchema = z.object({
  shareLink: z.string().min(1, "Share link hash is required."),
});


export const shareBrain = async (req: Request, res: Response): Promise<any> => {
  try {
    const { share } = shareBrainSchema.parse(req.body);
    const userId = req.userId;

    if (!userId) {
      return handleAuthError(res, "User not authenticated.");
    }

    const userIdObjectId = new mongoose.Types.ObjectId(userId);

    if (share) {
      let existingLink = await Link.findOne({ userId: userIdObjectId });

      if (existingLink) {
        res.status(200).json({
          success: true,
          hash: existingLink.hash,
          message: "Existing share link retrieved.",
        });
      }

      // If no existing link, create a new one
      // The hash will be automatically generated by the pre-save hook in Link model
      const newLink = await Link.create({
        userId: userIdObjectId,
        // hash: will be generated by pre-save hook
      });

      res.status(201).json({
        success: true,
        hash: newLink.hash,
        message: "New share link created.",
      });
      return;
    } else {
      // User wants to remove the share link
      const result = await Link.deleteOne({ userId: userIdObjectId });

      if (result.deletedCount === 0) {
        res.status(404).json({
          success: false,
          message: "No share link found for this user to remove.",
        });
        return;
      }

      res.status(200).json({
        success: true,
        message: "Share link removed successfully.",
      });
      return;
    }
  } catch (error: any) {
    if (error instanceof z.ZodError) {
      return handleZodError(res, error);
    }
    return handleServerError(res, error, "Failed to manage share link.");
  }
};

export const getSharedBrain = async (
  req: Request,
  res: Response
): Promise<any> => {
  try {
    const { shareLink: hash } = getSharedBrainSchema.parse(req.params);

    const link = await Link.findOne({ hash });

    if (!link) {
      res.status(404).json({
        // 404 Not Found is more appropriate for non-existent resource
        success: false,
        message: "Sorry, the shared link is incorrect or does not exist.",
      });
      return;
    }

    const userIdToFetch = link.userId; // This is already an ObjectId from Mongoose

    // Fetch content for the linked user
    const content = await Content.find({ userId: userIdToFetch })
      .populate("userId", "username") // Populate user details
      .populate("tags", "title"); // Populate tag titles

    // Fetch username for display
    const user = await User.findOne({ _id: userIdToFetch });

    if (!user) {
      // This is an edge case, implies a user was deleted but their share link remains.
      // Ideally, deletion of user should also delete their links.
      console.error(
        `Error: User with ID ${userIdToFetch} not found for share link ${hash}.`
      );
      res.status(404).json({
        success: false,
        message: "Shared content user not found.",
      });
      return;
    }

    res.status(200).json({
      success: true,
      username: user.username,
      content: content,
    });
    return;
  } catch (error: any) {
    if (error instanceof z.ZodError) {
      return handleZodError(res, error);
    }
    return handleServerError(res, error, "Failed to retrieve shared content.");
  }
};

